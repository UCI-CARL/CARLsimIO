#ifndef INBOUNDCHANNEL_H_
#define INBOUNDCHANNEL_H_

#include <CARLsimIO/Channel/Channel.hpp>
#include <CARLsimIO/Description.hpp>
#include <CARLsimIO/Reader/Reader.hpp>
#include <CARLsimIO/PropertyHolder.hpp>

#include <vector>
#include <string>
#include <iostream>
#include <fstream>


#include <CARLsimIO/api.hpp>	

#ifdef BOOST_MSVC
#  pragma warning( push )
#  pragma warning( disable: 4251 )
#endif


namespace carlsimio {
				
	/**
	 * This class represents a directed Channel from a signal source (eg vision)
	 * to a spike output, so spikes can be read from this channel
	 */
	class CARLSIMIO_API InboundChannel : public Channel {
		public:

			InboundChannel(): spikesLog_os(NULL), spikesLog_ofs(NULL) {}

			virtual ~InboundChannel()			
				{if(spikesLog_ofs != NULL) 
					{spikesLog_ofs->close();
					delete spikesLog_ofs;}				
				 spikesLog_ofs = NULL;}

			Description getChannelDescription() 
				{ return channelDescription; }

			/*! Returns the latest spikes generated by the channel */
			virtual const std::vector<unsigned>& getFiring() = 0;
			virtual const std::vector<double>& getCurrentVector() = 0;

			/*! Initializes the channel with a reader and set of properties 
			 *	
			 * The Channel assumes ownership of the Reader object. 
			 */
			virtual void initialize(Reader* reader, map<std::string, Property>& properties) = 0;

			/*! Not supposed to be reimplemented */
			void setSpikesLog(const string logName) {
				// Spikes - Output
				spikesLog_os = NULL;
				if(spikesLog_ofs != NULL) {
					spikesLog_ofs->close();
					delete spikesLog_ofs;
				}
				spikesLog_ofs = NULL;
				if(logName=="cout")
					spikesLog_os = &cout;
				else if(logName!="null") {
					spikesLog_ofs = new ofstream(logName);
					spikesLog_os = spikesLog_ofs;
				}
			}

			virtual double getDopamineLevel() { return 0.0; }

		protected:
			Description channelDescription;

			// Generic Implementation of Spike Logging
			ostream *spikesLog_os;
			ofstream *spikesLog_ofs;

	};

}
#ifdef BOOST_MSVC
#  pragma warning( pop )
#endif

#endif /* INBOUNDCHANNEL_H_ */
